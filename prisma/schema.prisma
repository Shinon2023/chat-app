generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id           String        @id @default(cuid())
  username     String        @unique
  email        String        @unique
  password     String
  img          Bytes?
  participants Participant[]
  messages     Message[]
  accessRight  String
  accessToken  String?
  profile      Profile?      @relation
  request      Request[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Profile {
  id               String @id @default(cuid())
  user             User   @relation(fields: [userId], references: [id])
  userId           String @unique
  bio              String
  address          String
  nationalId       String @unique
  nationalIdImgUrl Bytes?
  phoneNumber      String
  firstName        String
  lastName         String
  age              String
  birthday         String
  gender           String
}

model Conversation {
  id           String        @id @default(cuid())
  name         String?
  isGroup      Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  participants Participant[]
  messages     Message[]
}

model Participant {
  id             String       @id @default(cuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Message {
  id             String       @id @default(cuid())
  sender         User         @relation(fields: [senderId], references: [id])
  senderId       String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Stock {
  id       String    @id @default(cuid())
  name     String
  amount   Int
  category String?
  img      Bytes?
  requests Request[] @relation("StockRequests")
}

model Request {
  id        String   @id @default(cuid())
  stock     Stock[]  @relation("StockRequests")
  status    String
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  history   History  @relation(fields: [historyId], references: [id])
  historyId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model History {
  id        String   @id @default(cuid())
  request   Request? @relation()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}